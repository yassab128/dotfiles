#!/bin/sh

set -efu

# the script is working, I just find it counterproductive to use youtube
# from the terminal, no matter how comfy I made it look (pictures, colored
# text etc), it just feels dumb

primaryTemplateParameters='title: %(title)s
average_rating: %(average_rating)s
dislike_count: %(dislike_count)s
like_count: %(like_count)s
resolution: %(resolution)s
upload_date: %(upload_date)s
uploader: %(uploader)s
'

secondaryTemplateParameters='abr: %(abr)s
acodec: %(acodec)s
age_limit: %(age_limit)s
ailable: %(ailable)s
album: %(album)s
album_artist: %(album_artist)s
album_type: %(album_type)s
alt_title: %(alt_title)s
artist: %(artist)s
asr: %(asr)s
autonumber: %(autonumber)s
average_rating: %(average_rating)s
channel: %(channel)s
channel_id: %(channel_id)s
chapter: %(chapter)s
chapter_id: %(chapter_id)s
chapter_number: %(chapter_number)s
comment_count: %(comment_count)s
container: %(container)s
creator: %(creator)s
disc_number: %(disc_number)s
dislike_count: %(dislike_count)s
display_id: %(display_id)s
duration: %(duration)s
end_time: %(end_time)s
episode: %(episode)s
episode_id: %(episode_id)s
episode_number: %(episode_number)s
epoch: %(epoch)s
ext: %(ext)s
extractor: %(extractor)s
extractor_key: %(extractor_key)s
filesize: %(filesize)s
filesize_approx: %(filesize_approx)s
format: %(format)s
format_id: %(format_id)s
format_note: %(format_note)s
fps: %(fps)s
genre: %(genre)s
height: %(height)s
id: %(id)s
is_live: %(is_live)s
license: %(license)s
like_count: %(like_count)s
location: %(location)s
playlist: %(playlist)s
playlist_id: %(playlist_id)s
playlist_index: %(playlist_index)s
playlist_title: %(playlist_title)s
playlist_uploader: %(playlist_uploader)s
playlist_uploader_id: %(playlist_uploader_id)s
protocol: %(protocol)s
release_date: %(release_date)s
release_year: %(release_year)s
repost_count: %(repost_count)s
resolution: %(resolution)s
season: %(season)s
season_id: %(season_id)s
season_number: %(season_number)s
series: %(series)s
start_time: %(start_time)s
tbr: %(tbr)s
timestamp: %(timestamp)s
title: %(title)s
track: %(track)s
track_id: %(track_id)s
track_number: %(track_number)s
upload_date: %(upload_date)s
uploader: %(uploader)s
uploader_id: %(uploader_id)s
url: %(url)s
vbr: %(vbr)s
vcodec: %(vcodec)s
view_count: %(view_count)s
width: %(width)s
'

fetchPlaylists()
{
	shift
	query="$(sed 's/\s/+/g'<<-EOF
	$*
	EOF
	)"

	grep --only-matching --perl-regexp \
`# playlistName`\
'(?<=,"title":\{"simpleText":")(.*?)(?="},"thumbnails")|'\
`#channelName`\
'(?<="shortBylineText":\{"runs":\[\{"text":")(.*?)(?=","navigationEndpoint")|'\
`# videosNumber`\
'(?<="videoCount":")(.*?)(?=","navigationEndpoint")|'\
`# playlistId`\
'(?<="playlistRenderer":\{"playlistId":")(.*?)(?=","title")' <<-EOF |
"$(curl --silent \
	"https://www.youtube.com/results?search_query=$query&sp=EgIQAw")"
EOF
	sed -n '
1~4 {
	h # overwrite hold space
}
2~4 H # append to hold space
3~4 {
	s/^.*$/\[\x1b[33m&\x1b[0m\]/ # add brackets around videosNumber
	x # swap pattern space and hold space
	G # append hold space (contains videosNumber)
	N # append next line
	s/\n/ /g # glue the lines together
	p # and print them
}
4~4 H # append to hold space
'
}

fetchVideos()
{
	shift
	query="$(sed 's/\s/+/g'<<-EOF
	$*
	EOF
	)"

	grep --only-matching --perl-regexp \
`# videoName`\
'(?<=}\]},"title":\{"runs":\[\{"text":")(.*?)(?="}\],"accessibility")|'\
`# viewCount`\
'(?<="},"viewCountText":\{"simpleText":")(.*?)(?=\s)|'\
`# channelName`\
'(?<="ownerText":\{"runs":\[\{"text":")(.*?)(?=")|'\
`# videoLength`\
'(?<="}},"simpleText":")(?:(\d{1,2}):)?(\d{1,2}):(\d{2})(?="},"style":")|'\
`# videoId`\
'(?<="addedVideoId":")(.*?)(?=","action")' <<-EOF |
$(curl --silent https://www.youtube.com/results?search_query="$query")
EOF
	awk '
	{
	if (NR % 5 == 1) {
		printf "%s ", $0
		getline
		printf "[\033[1;33m%s\033[0m] ", $0	# put brackets around viewCount
		getline	# and set its colour to green
		printf "%s ", $0
		getline
		printf "[\033[1;32m%s\033[0m] ", $0	# do the same with with videoLength
		getline	# and set its colour to yellow
		print $0
	}
}
'
}

playAplaylist()
{
	URL='https://youtube.com/playlist?list='"$1"
	i=1
	while true; do
		videoID="$(youtube-dl "$URL" --playlist-items "$i" --get-id)"

		curl -s http://img.youtube.com/vi/"$videoID"/hqdefault.jpg -o- | viu -
		youtube-dl "$URL" --ignore-errors --playlist-items "$i" --get-filename \
			--skip-download -o "$secondaryTemplateParameters" |
			grep --invert-match " NA$" || break

		mpv --no-video --msg-level=cplayer=no https://youtu.be/"$videoID"

			i=$((i + 1))
			clear; tmux clear-history
	done
	unset i

}

while [ $# -gt 0 ]
do
    # Consume next (1st) argument
    case $1 in
    -v | --video-search) 
	videos="$(fetchVideos "$@")"
	videoID="$(
	{ fzf --ansi --preview="
	youtube-dl {-1} --get-filename \
		--skip-download -o '$primaryTemplateParameters' | grep -v ' NA$'
	curl -s http://img.youtube.com/vi/{-1}/hqdefault.jpg -o- | viu -h 45 -w 95 -
	" \
	--with-nth="..-2" <<-EOF
	$videos
	EOF
	} | awk '{print $NF}'
	)"
	# in case you want to view the thumbnail in the terminal, install `viu`
	# install uncomment the next two lines
	# skip running the following commands if no videoURL is given
	[ -n "$videoID" ] && youtube-dl "$videoID" --get-filename \
		--skip-download -o "$secondaryTemplateParameters" | grep -v " NA$" &&
	mpv --no-video --msg-level=cplayer=no https://youtu.be/"$videoID"
		exit
		;;
    -p | --playlist-search) 
		playlists="$(fetchPlaylists "$@")"
		playlistID="$(
			fzf --ansi --with-nth="2.." <<-EOF |
			$playlists
			EOF
			awk '{print $1}'
		)"
		# got the name of the annoying module (cplayer) with `mpv --msg-module`
		playAplaylist "$playlistID"
		exit
		;;
    -P | --playlist-url) 
		playAplaylist "$2"
		exit
		;;
    (-*) 
	  printf 'illegal option\n'
	  exit
	  ;;
    (*) 
	  exit
	  ;;
    esac
done
